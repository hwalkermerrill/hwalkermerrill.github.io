Please respond thoroughly (at least two sentences for each question) to
the following three questions.

1. Describe an experience you had this semester where you saw the power of
functions.

It might be silly, but I really had a moment when I learned about exception. I kinda
knew how functions worked and I was trying to use functions instead of copy/pasting code,
but I often felt like I was spending a ton of time writing validation loops to feel like
I could get the program working under ordinary scenarios. But when I learned about
exceptions, something just clicked and I had a ton of fun learning how to use them to
troubleshoot a run or build. Even more, when I was working on my final, I was able to use
an exception so that if the wrong input was put in by the user, it corrected it to a
default input before processing, which kept my program together. Now I feel like I can
do/have done a lot with functions, and I'm trying to figure out how to write a function
to solve a problem instead of copy-pasting between points.

2. In your judgment, what is the value of test functions?

Test functions help to ensure that a function is operating as intended, if it isn't,
helps you pinpoint what is going wrong. Not only is this very useful during development,
it is critical when refactoring code, to ensure that any changes do not have unintended
knock-on effects.

3. Describe your process for troubleshooting and fixing a program that
has a problem. What is one thing you can do to improve your process?

Usually, the first thing I try when troubleshooting code is to check the arguments
against the parameters to make sure that the intended thing is being passed
(and of the intended data type). Then I usually write a test function, since I have
so-far needed to do that anyway. When I get really stuck, I start going through the
code line-by-line. If I'm still stuck, I turn to researching things online to see if
I'm missing something or approaching things incorrectly. My biggest weakness is not
being very good/quick at stepping through code; if I did it more, I would be more
confident in how to step through code, and I could probably troubleshoot things faster.